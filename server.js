// Mongoose is a nice library for connecting to MongoDB
const db = require('mongoose');

// Used to let the server understand JSON in request bodies
const bodyParser = require('body-parser');

// Set up a web server
const express = require('express');
const app = express();

// Understand POST requests of the JSON kind
app.use(bodyParser.json());

// Connect to a wonderfully named database
const dbName = 'beeccyjewiojadioasdioasjiodas';
db.connect(
  'mongodb://localhost/' + dbName, // database URL
  { useMongoClient: true }, // extra config
  () => console.log('connected to db', dbName) // called when connected (or something went wrong)
);


// Set up a database model for a movie
const Movie = db.model('Movie', {
  title: { type: String, required: true },
  year: { type: Number, required: false },
});

// Test endpoint to verify that Express is set up correctly
app.get('/', (req, res) => {
  res.send('hello');
});

/*
 * Creates a new movie, as long as the request body contains (at least) "title"
 * Responds with the newly stored movie, including the autogenerated _id field.
 */
app.post('/movies', async (req, res) => {
  const newMovie = new Movie(req.body);
  const savedMovie = await newMovie.save();
  res.json(savedMovie);
});

// Returns all movies currently stored in the DB
async function getMovies() {
  // Find all movies in the DB
  const movies = await Movie.find();
  return movies;
}

// Responds with all available movies (defined by getMovies())
app.get('/movies', async (req, res) => {
  const movies = await getMovies();
  res.send(movies);
});

// Same as GET /movies above, but only responds with the movie titles (an array of strings)
app.get('/movie-titles', async (req, res) => {
  const movies = await getMovies();
  const movieTitles = movies.map(movie => movie.title);
  res.send(movieTitles);
});

// Listen for requests on port 1234, log to console when ready
app.listen(1234, () => console.log('Listening on http://localhost:1234/'));
